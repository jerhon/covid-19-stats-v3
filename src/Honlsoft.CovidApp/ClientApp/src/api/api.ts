// tslint:disable
/**
 * Honlsoft Covid Tracking API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AggregateDataPointsDto
 */
export interface AggregateDataPointsDto {
    /**
     * 
     * @type {number}
     * @memberof AggregateDataPointsDto
     */
    positive?: number;
    /**
     * 
     * @type {number}
     * @memberof AggregateDataPointsDto
     */
    death?: number;
}
/**
 * 
 * @export
 * @interface AggregateDto
 */
export interface AggregateDto {
    /**
     * 
     * @type {string}
     * @memberof AggregateDto
     */
    name?: string | null;
    /**
     * 
     * @type {AggregateDataPointsDto}
     * @memberof AggregateDto
     */
    state?: AggregateDataPointsDto;
    /**
     * 
     * @type {AggregateDataPointsDto}
     * @memberof AggregateDto
     */
    total?: AggregateDataPointsDto;
}
/**
 * 
 * @export
 * @interface CovidStateDailyRecord
 */
export interface CovidStateDailyRecord {
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CovidStateDailyRecord
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof CovidStateDailyRecord
     */
    state?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CovidStateDailyRecord
     */
    dataQualityGrade?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    death?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    deathConfirmed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    deathIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    deathProbable?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    hospitalized?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    hospitalizedCumulative?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    hospitalizedCurrently?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    hospitalizedIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    inIcuCumulative?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    inIcuCurrently?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    negative?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    negativeIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    negativeTestsAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    negativeTestsPeopleAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    negativeTestsViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    onVentilatorCumulative?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    onVentilatorCurrently?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positive?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveCasesViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveScore?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveTestsAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveTestsAntigen?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveTestsPeopleAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveTestsPeopleAntigen?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveTestsViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    recovered?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestEncountersViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestEncountersViralIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestResults?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestResultsIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsAntigen?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsPeopleAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsPeopleAntigen?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsPeopleViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsPeopleViralIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsViralIncrease?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CovidStateDailyRecord
     */
    sourceHash?: string | null;
}
/**
 * 
 * @export
 * @interface GetStateDataDto
 */
export interface GetStateDataDto {
    /**
     * 
     * @type {string}
     * @memberof GetStateDataDto
     */
    abbreviation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetStateDataDto
     */
    name?: string | null;
    /**
     * 
     * @type {Array<CovidStateDailyRecord>}
     * @memberof GetStateDataDto
     */
    dataPoints?: Array<CovidStateDailyRecord> | null;
}

/**
 * StateApi - axios parameter creator
 * @export
 */
export const StateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {string} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StatesStateAbbreviationAggregateGet: async (stateAbbreviation: string, since?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'stateAbbreviation' is not null or undefined
            if (stateAbbreviation === null || stateAbbreviation === undefined) {
                throw new RequiredError('stateAbbreviation','Required parameter stateAbbreviation was null or undefined when calling apiV1StatesStateAbbreviationAggregateGet.');
            }
            const localVarPath = `/api/v1/states/{stateAbbreviation}/aggregate`
                .replace(`{${"stateAbbreviation"}}`, encodeURIComponent(String(stateAbbreviation)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any instanceof Date) ?
                    (since as any).toISOString() :
                    since;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StatesStateAbbreviationGet: async (stateAbbreviation: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'stateAbbreviation' is not null or undefined
            if (stateAbbreviation === null || stateAbbreviation === undefined) {
                throw new RequiredError('stateAbbreviation','Required parameter stateAbbreviation was null or undefined when calling apiV1StatesStateAbbreviationGet.');
            }
            const localVarPath = `/api/v1/states/{stateAbbreviation}`
                .replace(`{${"stateAbbreviation"}}`, encodeURIComponent(String(stateAbbreviation)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StateApi - functional programming interface
 * @export
 */
export const StateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {string} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1StatesStateAbbreviationAggregateGet(stateAbbreviation: string, since?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateDto>> {
            const localVarAxiosArgs = await StateApiAxiosParamCreator(configuration).apiV1StatesStateAbbreviationAggregateGet(stateAbbreviation, since, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1StatesStateAbbreviationGet(stateAbbreviation: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStateDataDto>> {
            const localVarAxiosArgs = await StateApiAxiosParamCreator(configuration).apiV1StatesStateAbbreviationGet(stateAbbreviation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StateApi - factory interface
 * @export
 */
export const StateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {string} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StatesStateAbbreviationAggregateGet(stateAbbreviation: string, since?: string, options?: any): AxiosPromise<AggregateDto> {
            return StateApiFp(configuration).apiV1StatesStateAbbreviationAggregateGet(stateAbbreviation, since, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StatesStateAbbreviationGet(stateAbbreviation: string, options?: any): AxiosPromise<GetStateDataDto> {
            return StateApiFp(configuration).apiV1StatesStateAbbreviationGet(stateAbbreviation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StateApi - object-oriented interface
 * @export
 * @class StateApi
 * @extends {BaseAPI}
 */
export class StateApi extends BaseAPI {
    /**
     * 
     * @param {string} stateAbbreviation 
     * @param {string} [since] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StateApi
     */
    public apiV1StatesStateAbbreviationAggregateGet(stateAbbreviation: string, since?: string, options?: any) {
        return StateApiFp(this.configuration).apiV1StatesStateAbbreviationAggregateGet(stateAbbreviation, since, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} stateAbbreviation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StateApi
     */
    public apiV1StatesStateAbbreviationGet(stateAbbreviation: string, options?: any) {
        return StateApiFp(this.configuration).apiV1StatesStateAbbreviationGet(stateAbbreviation, options).then((request) => request(this.axios, this.basePath));
    }

}


