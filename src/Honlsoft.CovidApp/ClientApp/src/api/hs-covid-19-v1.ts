/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class NationClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getLatest(  cancelToken?: CancelToken | undefined): Promise<LatestNationDataDto> {
        let url_ = this.baseUrl + "/api/v1/nation/latest";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetLatest(_response);
        });
    }

    protected processGetLatest(response: AxiosResponse): Promise<LatestNationDataDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LatestNationDataDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LatestNationDataDto>(<any>null);
    }
}

export class StateClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getStateData(stateAbbreviation: string | null , cancelToken?: CancelToken | undefined): Promise<GetStateDataDto> {
        let url_ = this.baseUrl + "/api/v1/states/{stateAbbreviation}";
        if (stateAbbreviation === undefined || stateAbbreviation === null)
            throw new Error("The parameter 'stateAbbreviation' must be defined.");
        url_ = url_.replace("{stateAbbreviation}", encodeURIComponent("" + stateAbbreviation));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetStateData(_response);
        });
    }

    protected processGetStateData(response: AxiosResponse): Promise<GetStateDataDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetStateDataDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetStateDataDto>(<any>null);
    }

    getAggregate(stateAbbreviation: string | null, since: Date | null | undefined , cancelToken?: CancelToken | undefined): Promise<AggregateDto> {
        let url_ = this.baseUrl + "/api/v1/states/{stateAbbreviation}/aggregate?";
        if (stateAbbreviation === undefined || stateAbbreviation === null)
            throw new Error("The parameter 'stateAbbreviation' must be defined.");
        url_ = url_.replace("{stateAbbreviation}", encodeURIComponent("" + stateAbbreviation));
        if (since !== undefined && since !== null)
            url_ += "since=" + encodeURIComponent(since ? "" + since.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAggregate(_response);
        });
    }

    protected processGetAggregate(response: AxiosResponse): Promise<AggregateDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AggregateDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AggregateDto>(<any>null);
    }
}

export class LatestNationDataDto implements ILatestNationDataDto {
    dataPoint?: CovidNationDailyRecord | undefined;

    constructor(data?: ILatestNationDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dataPoint = _data["dataPoint"] ? CovidNationDailyRecord.fromJS(_data["dataPoint"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LatestNationDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new LatestNationDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataPoint"] = this.dataPoint ? this.dataPoint.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ILatestNationDataDto {
    dataPoint?: CovidNationDailyRecord | undefined;
}

export class CovidNationDailyRecord implements ICovidNationDailyRecord {
    id?: number;
    date?: Date;
    states?: number;
    positive?: number;
    negative?: number;
    pending?: number;
    hospitalizedCurrently?: number;
    hospitalizedCumulative?: number;
    inIcuCurrently?: number;
    inIcuCumulative?: number;
    onVentilatorCurrently?: number;
    onVentilatorCumulative?: number;
    recovered?: number;
    dateChecked?: Date;
    death?: number;
    hospitalized?: number;
    totalTestResults?: number;
    lastModified?: Date;
    total?: number;
    posNeg?: number;
    deathIncrease?: number;
    hospitalizedIncrease?: number;
    negativeIncrease?: number;
    positiveIncrease?: number;
    totalTestResultsIncrease?: number;
    hash?: string | undefined;
    sourceHash?: string | undefined;

    constructor(data?: ICovidNationDailyRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.states = _data["states"];
            this.positive = _data["positive"];
            this.negative = _data["negative"];
            this.pending = _data["pending"];
            this.hospitalizedCurrently = _data["hospitalizedCurrently"];
            this.hospitalizedCumulative = _data["hospitalizedCumulative"];
            this.inIcuCurrently = _data["inIcuCurrently"];
            this.inIcuCumulative = _data["inIcuCumulative"];
            this.onVentilatorCurrently = _data["onVentilatorCurrently"];
            this.onVentilatorCumulative = _data["onVentilatorCumulative"];
            this.recovered = _data["recovered"];
            this.dateChecked = _data["dateChecked"] ? new Date(_data["dateChecked"].toString()) : <any>undefined;
            this.death = _data["death"];
            this.hospitalized = _data["hospitalized"];
            this.totalTestResults = _data["totalTestResults"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.total = _data["total"];
            this.posNeg = _data["posNeg"];
            this.deathIncrease = _data["deathIncrease"];
            this.hospitalizedIncrease = _data["hospitalizedIncrease"];
            this.negativeIncrease = _data["negativeIncrease"];
            this.positiveIncrease = _data["positiveIncrease"];
            this.totalTestResultsIncrease = _data["totalTestResultsIncrease"];
            this.hash = _data["hash"];
            this.sourceHash = _data["sourceHash"];
        }
    }

    static fromJS(data: any): CovidNationDailyRecord {
        data = typeof data === 'object' ? data : {};
        let result = new CovidNationDailyRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["states"] = this.states;
        data["positive"] = this.positive;
        data["negative"] = this.negative;
        data["pending"] = this.pending;
        data["hospitalizedCurrently"] = this.hospitalizedCurrently;
        data["hospitalizedCumulative"] = this.hospitalizedCumulative;
        data["inIcuCurrently"] = this.inIcuCurrently;
        data["inIcuCumulative"] = this.inIcuCumulative;
        data["onVentilatorCurrently"] = this.onVentilatorCurrently;
        data["onVentilatorCumulative"] = this.onVentilatorCumulative;
        data["recovered"] = this.recovered;
        data["dateChecked"] = this.dateChecked ? this.dateChecked.toISOString() : <any>undefined;
        data["death"] = this.death;
        data["hospitalized"] = this.hospitalized;
        data["totalTestResults"] = this.totalTestResults;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["total"] = this.total;
        data["posNeg"] = this.posNeg;
        data["deathIncrease"] = this.deathIncrease;
        data["hospitalizedIncrease"] = this.hospitalizedIncrease;
        data["negativeIncrease"] = this.negativeIncrease;
        data["positiveIncrease"] = this.positiveIncrease;
        data["totalTestResultsIncrease"] = this.totalTestResultsIncrease;
        data["hash"] = this.hash;
        data["sourceHash"] = this.sourceHash;
        return data; 
    }
}

export interface ICovidNationDailyRecord {
    id?: number;
    date?: Date;
    states?: number;
    positive?: number;
    negative?: number;
    pending?: number;
    hospitalizedCurrently?: number;
    hospitalizedCumulative?: number;
    inIcuCurrently?: number;
    inIcuCumulative?: number;
    onVentilatorCurrently?: number;
    onVentilatorCumulative?: number;
    recovered?: number;
    dateChecked?: Date;
    death?: number;
    hospitalized?: number;
    totalTestResults?: number;
    lastModified?: Date;
    total?: number;
    posNeg?: number;
    deathIncrease?: number;
    hospitalizedIncrease?: number;
    negativeIncrease?: number;
    positiveIncrease?: number;
    totalTestResultsIncrease?: number;
    hash?: string | undefined;
    sourceHash?: string | undefined;
}

export class GetStateDataDto implements IGetStateDataDto {
    abbreviation?: string | undefined;
    name?: string | undefined;
    dataPoints?: CovidStateDailyRecord[] | undefined;

    constructor(data?: IGetStateDataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.abbreviation = _data["abbreviation"];
            this.name = _data["name"];
            if (Array.isArray(_data["dataPoints"])) {
                this.dataPoints = [] as any;
                for (let item of _data["dataPoints"])
                    this.dataPoints!.push(CovidStateDailyRecord.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetStateDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetStateDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["abbreviation"] = this.abbreviation;
        data["name"] = this.name;
        if (Array.isArray(this.dataPoints)) {
            data["dataPoints"] = [];
            for (let item of this.dataPoints)
                data["dataPoints"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetStateDataDto {
    abbreviation?: string | undefined;
    name?: string | undefined;
    dataPoints?: CovidStateDailyRecord[] | undefined;
}

export class CovidStateDailyRecord implements ICovidStateDailyRecord {
    id?: number;
    date?: Date;
    state?: string | undefined;
    dataQualityGrade?: string | undefined;
    death?: number | undefined;
    deathConfirmed?: number | undefined;
    deathIncrease?: number | undefined;
    deathProbable?: number | undefined;
    hospitalized?: number | undefined;
    hospitalizedCumulative?: number | undefined;
    hospitalizedCurrently?: number | undefined;
    hospitalizedIncrease?: number | undefined;
    inIcuCumulative?: number | undefined;
    inIcuCurrently?: number | undefined;
    negative?: number | undefined;
    negativeIncrease?: number | undefined;
    negativeTestsAntibody?: number | undefined;
    negativeTestsPeopleAntibody?: number | undefined;
    negativeTestsViral?: number | undefined;
    onVentilatorCumulative?: number | undefined;
    onVentilatorCurrently?: number | undefined;
    positive?: number | undefined;
    positiveCasesViral?: number | undefined;
    positiveIncrease?: number | undefined;
    positiveScore?: number | undefined;
    positiveTestsAntibody?: number | undefined;
    positiveTestsAntigen?: number | undefined;
    positiveTestsPeopleAntibody?: number | undefined;
    positiveTestsPeopleAntigen?: number | undefined;
    positiveTestsViral?: number | undefined;
    recovered?: number | undefined;
    totalTestEncountersViral?: number | undefined;
    totalTestEncountersViralIncrease?: number | undefined;
    totalTestResults?: number | undefined;
    totalTestResultsIncrease?: number | undefined;
    totalTestsAntibody?: number | undefined;
    totalTestsAntigen?: number | undefined;
    totalTestsPeopleAntibody?: number | undefined;
    totalTestsPeopleAntigen?: number | undefined;
    totalTestsPeopleViral?: number | undefined;
    totalTestsPeopleViralIncrease?: number | undefined;
    totalTestsViral?: number | undefined;
    totalTestsViralIncrease?: number | undefined;
    sourceHash?: string | undefined;

    constructor(data?: ICovidStateDailyRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.state = _data["state"];
            this.dataQualityGrade = _data["dataQualityGrade"];
            this.death = _data["death"];
            this.deathConfirmed = _data["deathConfirmed"];
            this.deathIncrease = _data["deathIncrease"];
            this.deathProbable = _data["deathProbable"];
            this.hospitalized = _data["hospitalized"];
            this.hospitalizedCumulative = _data["hospitalizedCumulative"];
            this.hospitalizedCurrently = _data["hospitalizedCurrently"];
            this.hospitalizedIncrease = _data["hospitalizedIncrease"];
            this.inIcuCumulative = _data["inIcuCumulative"];
            this.inIcuCurrently = _data["inIcuCurrently"];
            this.negative = _data["negative"];
            this.negativeIncrease = _data["negativeIncrease"];
            this.negativeTestsAntibody = _data["negativeTestsAntibody"];
            this.negativeTestsPeopleAntibody = _data["negativeTestsPeopleAntibody"];
            this.negativeTestsViral = _data["negativeTestsViral"];
            this.onVentilatorCumulative = _data["onVentilatorCumulative"];
            this.onVentilatorCurrently = _data["onVentilatorCurrently"];
            this.positive = _data["positive"];
            this.positiveCasesViral = _data["positiveCasesViral"];
            this.positiveIncrease = _data["positiveIncrease"];
            this.positiveScore = _data["positiveScore"];
            this.positiveTestsAntibody = _data["positiveTestsAntibody"];
            this.positiveTestsAntigen = _data["positiveTestsAntigen"];
            this.positiveTestsPeopleAntibody = _data["positiveTestsPeopleAntibody"];
            this.positiveTestsPeopleAntigen = _data["positiveTestsPeopleAntigen"];
            this.positiveTestsViral = _data["positiveTestsViral"];
            this.recovered = _data["recovered"];
            this.totalTestEncountersViral = _data["totalTestEncountersViral"];
            this.totalTestEncountersViralIncrease = _data["totalTestEncountersViralIncrease"];
            this.totalTestResults = _data["totalTestResults"];
            this.totalTestResultsIncrease = _data["totalTestResultsIncrease"];
            this.totalTestsAntibody = _data["totalTestsAntibody"];
            this.totalTestsAntigen = _data["totalTestsAntigen"];
            this.totalTestsPeopleAntibody = _data["totalTestsPeopleAntibody"];
            this.totalTestsPeopleAntigen = _data["totalTestsPeopleAntigen"];
            this.totalTestsPeopleViral = _data["totalTestsPeopleViral"];
            this.totalTestsPeopleViralIncrease = _data["totalTestsPeopleViralIncrease"];
            this.totalTestsViral = _data["totalTestsViral"];
            this.totalTestsViralIncrease = _data["totalTestsViralIncrease"];
            this.sourceHash = _data["sourceHash"];
        }
    }

    static fromJS(data: any): CovidStateDailyRecord {
        data = typeof data === 'object' ? data : {};
        let result = new CovidStateDailyRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["state"] = this.state;
        data["dataQualityGrade"] = this.dataQualityGrade;
        data["death"] = this.death;
        data["deathConfirmed"] = this.deathConfirmed;
        data["deathIncrease"] = this.deathIncrease;
        data["deathProbable"] = this.deathProbable;
        data["hospitalized"] = this.hospitalized;
        data["hospitalizedCumulative"] = this.hospitalizedCumulative;
        data["hospitalizedCurrently"] = this.hospitalizedCurrently;
        data["hospitalizedIncrease"] = this.hospitalizedIncrease;
        data["inIcuCumulative"] = this.inIcuCumulative;
        data["inIcuCurrently"] = this.inIcuCurrently;
        data["negative"] = this.negative;
        data["negativeIncrease"] = this.negativeIncrease;
        data["negativeTestsAntibody"] = this.negativeTestsAntibody;
        data["negativeTestsPeopleAntibody"] = this.negativeTestsPeopleAntibody;
        data["negativeTestsViral"] = this.negativeTestsViral;
        data["onVentilatorCumulative"] = this.onVentilatorCumulative;
        data["onVentilatorCurrently"] = this.onVentilatorCurrently;
        data["positive"] = this.positive;
        data["positiveCasesViral"] = this.positiveCasesViral;
        data["positiveIncrease"] = this.positiveIncrease;
        data["positiveScore"] = this.positiveScore;
        data["positiveTestsAntibody"] = this.positiveTestsAntibody;
        data["positiveTestsAntigen"] = this.positiveTestsAntigen;
        data["positiveTestsPeopleAntibody"] = this.positiveTestsPeopleAntibody;
        data["positiveTestsPeopleAntigen"] = this.positiveTestsPeopleAntigen;
        data["positiveTestsViral"] = this.positiveTestsViral;
        data["recovered"] = this.recovered;
        data["totalTestEncountersViral"] = this.totalTestEncountersViral;
        data["totalTestEncountersViralIncrease"] = this.totalTestEncountersViralIncrease;
        data["totalTestResults"] = this.totalTestResults;
        data["totalTestResultsIncrease"] = this.totalTestResultsIncrease;
        data["totalTestsAntibody"] = this.totalTestsAntibody;
        data["totalTestsAntigen"] = this.totalTestsAntigen;
        data["totalTestsPeopleAntibody"] = this.totalTestsPeopleAntibody;
        data["totalTestsPeopleAntigen"] = this.totalTestsPeopleAntigen;
        data["totalTestsPeopleViral"] = this.totalTestsPeopleViral;
        data["totalTestsPeopleViralIncrease"] = this.totalTestsPeopleViralIncrease;
        data["totalTestsViral"] = this.totalTestsViral;
        data["totalTestsViralIncrease"] = this.totalTestsViralIncrease;
        data["sourceHash"] = this.sourceHash;
        return data; 
    }
}

export interface ICovidStateDailyRecord {
    id?: number;
    date?: Date;
    state?: string | undefined;
    dataQualityGrade?: string | undefined;
    death?: number | undefined;
    deathConfirmed?: number | undefined;
    deathIncrease?: number | undefined;
    deathProbable?: number | undefined;
    hospitalized?: number | undefined;
    hospitalizedCumulative?: number | undefined;
    hospitalizedCurrently?: number | undefined;
    hospitalizedIncrease?: number | undefined;
    inIcuCumulative?: number | undefined;
    inIcuCurrently?: number | undefined;
    negative?: number | undefined;
    negativeIncrease?: number | undefined;
    negativeTestsAntibody?: number | undefined;
    negativeTestsPeopleAntibody?: number | undefined;
    negativeTestsViral?: number | undefined;
    onVentilatorCumulative?: number | undefined;
    onVentilatorCurrently?: number | undefined;
    positive?: number | undefined;
    positiveCasesViral?: number | undefined;
    positiveIncrease?: number | undefined;
    positiveScore?: number | undefined;
    positiveTestsAntibody?: number | undefined;
    positiveTestsAntigen?: number | undefined;
    positiveTestsPeopleAntibody?: number | undefined;
    positiveTestsPeopleAntigen?: number | undefined;
    positiveTestsViral?: number | undefined;
    recovered?: number | undefined;
    totalTestEncountersViral?: number | undefined;
    totalTestEncountersViralIncrease?: number | undefined;
    totalTestResults?: number | undefined;
    totalTestResultsIncrease?: number | undefined;
    totalTestsAntibody?: number | undefined;
    totalTestsAntigen?: number | undefined;
    totalTestsPeopleAntibody?: number | undefined;
    totalTestsPeopleAntigen?: number | undefined;
    totalTestsPeopleViral?: number | undefined;
    totalTestsPeopleViralIncrease?: number | undefined;
    totalTestsViral?: number | undefined;
    totalTestsViralIncrease?: number | undefined;
    sourceHash?: string | undefined;
}

export class AggregateDto implements IAggregateDto {
    name?: string | undefined;
    state?: AggregateDataPointsDto | undefined;
    total?: AggregateDataPointsDto | undefined;

    constructor(data?: IAggregateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.state = _data["state"] ? AggregateDataPointsDto.fromJS(_data["state"]) : <any>undefined;
            this.total = _data["total"] ? AggregateDataPointsDto.fromJS(_data["total"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AggregateDto {
        data = typeof data === 'object' ? data : {};
        let result = new AggregateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["state"] = this.state ? this.state.toJSON() : <any>undefined;
        data["total"] = this.total ? this.total.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IAggregateDto {
    name?: string | undefined;
    state?: AggregateDataPointsDto | undefined;
    total?: AggregateDataPointsDto | undefined;
}

export class AggregateDataPointsDto implements IAggregateDataPointsDto {
    positive?: number;
    death?: number;

    constructor(data?: IAggregateDataPointsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.positive = _data["positive"];
            this.death = _data["death"];
        }
    }

    static fromJS(data: any): AggregateDataPointsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AggregateDataPointsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["positive"] = this.positive;
        data["death"] = this.death;
        return data; 
    }
}

export interface IAggregateDataPointsDto {
    positive?: number;
    death?: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}