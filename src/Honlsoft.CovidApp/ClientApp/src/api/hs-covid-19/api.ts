/* tslint:disable */
/* eslint-disable */
/**
 * Honlsoft COVID-19 API
 * Data from the COVID-19 Tracking Project aggregated in different ways to support API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AggregateDataPointsDto
 */
export interface AggregateDataPointsDto {
    /**
     * 
     * @type {number}
     * @memberof AggregateDataPointsDto
     */
    positive?: number;
    /**
     * 
     * @type {number}
     * @memberof AggregateDataPointsDto
     */
    death?: number;
}
/**
 * 
 * @export
 * @interface AggregateDto
 */
export interface AggregateDto {
    /**
     * 
     * @type {string}
     * @memberof AggregateDto
     */
    name?: string | null;
    /**
     * 
     * @type {AggregateDataPointsDto}
     * @memberof AggregateDto
     */
    state?: AggregateDataPointsDto | null;
    /**
     * 
     * @type {AggregateDataPointsDto}
     * @memberof AggregateDto
     */
    total?: AggregateDataPointsDto | null;
}
/**
 * 
 * @export
 * @interface CovidNationDailyRecord
 */
export interface CovidNationDailyRecord {
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CovidNationDailyRecord
     */
    date?: string;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    states?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    positive?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    negative?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    pending?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    hospitalizedCurrently?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    hospitalizedCumulative?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    inIcuCurrently?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    inIcuCumulative?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    onVentilatorCurrently?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    onVentilatorCumulative?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    recovered?: number;
    /**
     * 
     * @type {string}
     * @memberof CovidNationDailyRecord
     */
    dateChecked?: string;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    death?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    hospitalized?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    totalTestResults?: number;
    /**
     * 
     * @type {string}
     * @memberof CovidNationDailyRecord
     */
    lastModified?: string;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    posNeg?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    deathIncrease?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    hospitalizedIncrease?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    negativeIncrease?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    positiveIncrease?: number;
    /**
     * 
     * @type {number}
     * @memberof CovidNationDailyRecord
     */
    totalTestResultsIncrease?: number;
    /**
     * 
     * @type {string}
     * @memberof CovidNationDailyRecord
     */
    hash?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CovidNationDailyRecord
     */
    sourceHash?: string | null;
}
/**
 * 
 * @export
 * @interface CovidStateDailyRecord
 */
export interface CovidStateDailyRecord {
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CovidStateDailyRecord
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof CovidStateDailyRecord
     */
    state?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CovidStateDailyRecord
     */
    dataQualityGrade?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    death?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    deathConfirmed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    deathIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    deathProbable?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    hospitalized?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    hospitalizedCumulative?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    hospitalizedCurrently?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    hospitalizedIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    inIcuCumulative?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    inIcuCurrently?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    negative?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    negativeIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    negativeTestsAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    negativeTestsPeopleAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    negativeTestsViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    onVentilatorCumulative?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    onVentilatorCurrently?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positive?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveCasesViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveScore?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveTestsAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveTestsAntigen?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveTestsPeopleAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveTestsPeopleAntigen?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    positiveTestsViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    recovered?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestEncountersViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestEncountersViralIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestResults?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestResultsIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsAntigen?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsPeopleAntibody?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsPeopleAntigen?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsPeopleViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsPeopleViralIncrease?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsViral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CovidStateDailyRecord
     */
    totalTestsViralIncrease?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CovidStateDailyRecord
     */
    sourceHash?: string | null;
}
/**
 * 
 * @export
 * @interface GetStateDataDto
 */
export interface GetStateDataDto {
    /**
     * 
     * @type {string}
     * @memberof GetStateDataDto
     */
    abbreviation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetStateDataDto
     */
    name?: string | null;
    /**
     * 
     * @type {Array<CovidStateDailyRecord>}
     * @memberof GetStateDataDto
     */
    dataPoints?: Array<CovidStateDailyRecord> | null;
}
/**
 * 
 * @export
 * @interface LatestNationDataDto
 */
export interface LatestNationDataDto {
    /**
     * 
     * @type {CovidNationDailyRecord}
     * @memberof LatestNationDataDto
     */
    dataPoint?: CovidNationDailyRecord | null;
}

/**
 * NationApi - axios parameter creator
 * @export
 */
export const NationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nationGetLatest: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/nation/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NationApi - functional programming interface
 * @export
 */
export const NationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async nationGetLatest(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LatestNationDataDto>> {
            const localVarAxiosArgs = await NationApiAxiosParamCreator(configuration).nationGetLatest(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NationApi - factory interface
 * @export
 */
export const NationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nationGetLatest(options?: any): AxiosPromise<LatestNationDataDto> {
            return NationApiFp(configuration).nationGetLatest(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NationApi - object-oriented interface
 * @export
 * @class NationApi
 * @extends {BaseAPI}
 */
export class NationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NationApi
     */
    public nationGetLatest(options?: any) {
        return NationApiFp(this.configuration).nationGetLatest(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StateApi - axios parameter creator
 * @export
 */
export const StateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {string} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stateGetAggregate: async (stateAbbreviation: string, since?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'stateAbbreviation' is not null or undefined
            if (stateAbbreviation === null || stateAbbreviation === undefined) {
                throw new RequiredError('stateAbbreviation','Required parameter stateAbbreviation was null or undefined when calling stateGetAggregate.');
            }
            const localVarPath = `/api/v1/states/{stateAbbreviation}/aggregate`
                .replace(`{${"stateAbbreviation"}}`, encodeURIComponent(String(stateAbbreviation)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any instanceof Date) ?
                    (since as any).toISOString() :
                    since;
            }


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stateGetStateData: async (stateAbbreviation: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'stateAbbreviation' is not null or undefined
            if (stateAbbreviation === null || stateAbbreviation === undefined) {
                throw new RequiredError('stateAbbreviation','Required parameter stateAbbreviation was null or undefined when calling stateGetStateData.');
            }
            const localVarPath = `/api/v1/states/{stateAbbreviation}`
                .replace(`{${"stateAbbreviation"}}`, encodeURIComponent(String(stateAbbreviation)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StateApi - functional programming interface
 * @export
 */
export const StateApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {string} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stateGetAggregate(stateAbbreviation: string, since?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateDto>> {
            const localVarAxiosArgs = await StateApiAxiosParamCreator(configuration).stateGetAggregate(stateAbbreviation, since, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stateGetStateData(stateAbbreviation: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStateDataDto>> {
            const localVarAxiosArgs = await StateApiAxiosParamCreator(configuration).stateGetStateData(stateAbbreviation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StateApi - factory interface
 * @export
 */
export const StateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {string} [since] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stateGetAggregate(stateAbbreviation: string, since?: string, options?: any): AxiosPromise<AggregateDto> {
            return StateApiFp(configuration).stateGetAggregate(stateAbbreviation, since, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} stateAbbreviation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stateGetStateData(stateAbbreviation: string, options?: any): AxiosPromise<GetStateDataDto> {
            return StateApiFp(configuration).stateGetStateData(stateAbbreviation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StateApi - object-oriented interface
 * @export
 * @class StateApi
 * @extends {BaseAPI}
 */
export class StateApi extends BaseAPI {
    /**
     * 
     * @param {string} stateAbbreviation 
     * @param {string} [since] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StateApi
     */
    public stateGetAggregate(stateAbbreviation: string, since?: string, options?: any) {
        return StateApiFp(this.configuration).stateGetAggregate(stateAbbreviation, since, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} stateAbbreviation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StateApi
     */
    public stateGetStateData(stateAbbreviation: string, options?: any) {
        return StateApiFp(this.configuration).stateGetStateData(stateAbbreviation, options).then((request) => request(this.axios, this.basePath));
    }
}


